
字符串中的下标:     变量名[起始下标:终止下标:步进]

    name = "abcdefg"
    name[0] 是 a 
    name[1] 是 b
    ...
    name[6] 是 g

    name[-1] 是 g        与 name[len(name)-1] 等同
    name[-2] 是 f
    ...
    
    下标从左向右取值是从 0 开始
    下标从右向左取值是从-1 开始

字符串中的切分

    name = "abcdefgABCDEFG"
    name[2:5] 是 "cde"      2:5   是从第2个下标到第4个下标  5不算
    name[2:-1] 是 "cdefgABCDEF"   是从第2个下标到倒数第二个下标 -1是最后一个不算
    name[2:]   是 "cdefgABCDEFG"  是从第2个下标到最后一个
    
    name[2:-1:2] 是 "ceACE"       是从第2个下标到倒数第二个下标中步进2的字符串
        **步进如果是整数,就是从左至右进行下标的步进 例:name[2:8:2] **
        **步进如果是负数,就是从右至左进行下标的步进 例:name[2:8:-2] **
        
    name[-1:0:-1] 是 "GFEDCBAgfedcb"   从最后一个下标至第一个下标步进为从右至左-1的数  
    name[-1::-1]  是 "GFEDCBAgfedcba"  从最后一个下标至第一个下标步进为从右至左-1的数 
     
    name[::-1] 是 name[-1::-1]
    name[::1]  是 name[0::1]
    
   

字符串常见操作
    
    Mystr = "hello world itcast and itcastxxxcpp"

    Mystr.find("world") 
    Mystr.rfind("itcast")
    Mystr.index("donge")                   反回报错
    Mystr.rindex("itcast") 
    Mystr.count("itcast")                  反回 2       计算itcast有几个
    
    替换：
    >>>Mystr.replace("world","WORLD")      原字符串不能被改变,因为 字符串、数字、元组是不可变类型
    'hello WORLD itcast and itcastxxxcpp'
    
    >>> Mystr.replace("itcast","ITCAST",1) 
    'hello world ITCAST and itcastxxxcpp'
    
    切割
    >>> Mystr.split(" ")
    ['hello', 'world', 'itcast', 'and', 'itcastxxxcpp']
    
    字符串首字母大写
     >>>Mystr.capitalize()
     'Hello world itcast and itcastxxxcpp'
     
    所有字符串首字母大写
    >>> Mystr.title()
    'Hello World Itcast And Itcastxxxcpp'

列表
    names = ["你","去","啊"]
    
    #C语言中的数组定义 int nums[]={11,22,33,44,55}  不能是其它字符串,元组啥的
    
    names = [11,22,3.14,"fdas"]  列表可以是任何类型的数据
    



注意细节：
    a = [11,22,33]
    b = [44,55]
    a = a.append(b)
    print(a)
        
        得出的值是None  因为当a.apeend(b) 操作后  a已经添加了b的值   再附值a = a.append(b) 就是多此一举
        正确的代码应该是
        
        a = [11,22,33]
        b = [44,55]
        a.append(b)
        print(a)
