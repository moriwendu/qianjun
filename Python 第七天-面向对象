#保护对象的属性    意思就是使用中使用判断来对比                    #这里直接给类添加属性，中间没有使用对象的属性判断，明显的age = -10是不合理的
class Dog:                                                      class Dog:
    def set_age(self,new_age):                                       pass
        if new_age>0 and new_age<=100:                          dog = Dog()
            self.age = new_age                                  dog.name = "小李"
        else:                                                   dong.age = -10
            self.age = 0                                        print(dog.name,dog.age)

    def get_age(self):
        return self.age
dog = Dog()
#dog.age = -10

dog.set_age(-10)
age = dog.get_age()
print(age)
#print(dog.age)




#私有方法的----1
class Dog:
    #在前面加上__代表使用的是私有方法
    def __test1(self):
        print("----------1----------")
    
    def test2(self):
        print("----------2----------")
dog = Dog()
dog.__test1()  #私有方法直接调用会报错，需要方法调用方法即下列实例2
dog.test2()

jony@jony:~$ python3 siyou.py 
Traceback (most recent call last):
  File "siyou.py", line 9, in <module>
    dog.__test1()
AttributeError: 'Dog' object has no attribute '__test1'

#私有方法----2
class Dog:    #定义一个类，假设我们的值满足条件时，我们调用私用方法

    def __send_msg(self):  #__前面有两个下划线就说明是个私有的方法
        print("------正在发送短信------")
        
    def send_msg(self, new_money):    #当我们满足条件时，让方法自行调用这个私有的方法，否则是打印不满足的条件
        if new_money>100:
            self.__send_msg()
        else:
            print("余额不足,请先充值 再发送短信")

dog = Dog()
dog.send_msg(1000)


#__del__方法  ----1

class Dog:
    
    def __del__(self):  #当引用计数为0的时候，python解释器会自动调用__del__方法 此方法就是解决了一些善后的事儿
        print("-----英雄over------")

dog1 = Dog()
dog2 = dog1

del dog1#不会调用 __del__方法,因为这个对象 还有其他的变量指向它,即 引用计算不是0
del dog2#此时会调用__del__方法,因为没有变量指向它了
print("====================")

#如果在程序结束时,有些对象还存在,那么python解释器会自动调用它们的__del__方法来完成清理工作

#__del__方法  ----2

#引用计数的查看     引用计数sys.getrefcount()时会找个变量存储值，所以会在原始的计数上再加上1
In [1]: import sys
In [2]: class T:
   ...:     pass
   ...: 
In [3]: t = T()
In [4]: sys.getrefcount(t)
Out[4]: 2
In [5]: tt = t
In [6]: sys.getrefcount(t)
Out[6]: 3
In [7]: del tt
In [8]: sys.getrefcount(t)
Out[8]: 2


#继承  父类的父类继承

class Animal: 
    def eat(self):
        print("-----吃----")
    def drink(self):
        print("-----喝----")
    def sleep(self):
        print("-----睡觉----")
    def run(self):
        print("-----跑----")

class Dog(Animal):    #继承的时候在后面加上要继续的父类名称
    def bark(self):
        print("----汪汪叫---")


class Xiaotq(Dog):    #继续的时候我们继续继承上面的类
    def fly(self):
        print("----飞----")


xiaotq = Xiaotq()
xiaotq.fly()
xiaotq.bark()
xiaotq.eat()

