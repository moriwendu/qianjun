########      __new__   是在实例创建之前被调用的，因为它的任务就是创建实例然后返回该实例，是个静态方法


class Dog(object):
    def __init__(self):    #当我们创建一个对象时，对象会直接调用__init__实例方法
        print("----init方法-----")

    def __del__(self):     #当我们的对象使用完之后，__del__ 实例方法会默认被执行
        print("----del方法-----")

    def __str__(self):
        print("----str方法-----")
        return "对象的描述信息"

    def __new__(cls):#cls此时是Dog指向的那个类对象

        #print(id(cls))

        print("----new方法-----")
        return object.__new__(cls)


#print(id(Dog))

xtq = Dog()

####代码运行完的结果是：
jony@jony:~$ python3 __new__.py 
init
del

##总结
# __new__至少要有一个参数cls，代表要实例化的类，此参数在实例化时由Python解释器自动提供

#__new__必须要有返回值，返回实例化出来的实例，这点在自己实现__new__时要特别注意，可以return父类__new__出来的实例，
# 或者直接是object的__new__出来的实例

#__init__有一个参数self，就是这个__new__返回的实例，__init__在__new__的基础上可以完成一些其它初始化的动作，__init__不需要返回值

#我们可以将类比作制造商，__new__方法就是前期的原材料购买环节，__init__方法就是在有原材料的基础上，加工，初始化商品环节


########  __name__  变量
     
      #当__name__这个变量被定义时他的变量根据模块的名称来变化，如叫send.py 那__name__就是 send  如果是send.py自身调用__name__  那
      #__name__的值就是__main__这个字符串
      
 #### 参考代码： 
 
 ##----1-----------------------------------------------------------------------
 
 jony#jony:~$ vim send.py
 def test1():
    print("-----------test1------------")

def test2():
    print("-----------test2------------")

def test3():
    print(__name__)

if __name__ == "__main__":
    test1()
    test2()

##----2------------------------------------------------------------------------

jony@jony:~$ vim recv.py 
def test1():
    print("--------recv-----")

##----3------------------------------------------------------------------------
jony@jony:~$ vim main.py
import send
import recv
send.test1()
send.test2()
send.test3()
recv.test1()

#得到的结果是：
jony@jony:~$ python3 main.py 
-----------test1------------
-----------test2------------
send
--------recv-----



#当我们用代码调用代码时  代码文件1 的if __name__ 的值不等于__main__这个字符串  下面的代码就不执行了。  这样有效的避免了测试代码时起的冲突

######## __all__ 

#如果导入这个模块的方式是 from 模块名 import * ,那么仅仅会导入__all__的列表中包含的名字 (可以有变量，可以有类，可以有函数...)
__all__ = ["test1","Test"]

def test1():
    print("----test-1-----")

def test2():
    print("----test-2-----")

num = 100

class Test(object):
    pass
