class Cat:    #类只是定义对像所需要的功能。
    #属性
    
    #方法
    def eat(self):
        print("猫在吃鱼...")
        
    def drink(self):
        print("猫在喝水...")
        
#创建一个对象
tom = Cat()    #创建一个对象，是在内存开辟一个空间，返回一个对象的引用给tom   即 tom = 创建对象的引用
tom.eat()      #调用对象定义的方法
tom.drink()    #调用对象定义的方法




class SweetPotato:
    """定义了一个地瓜类"""
    def __init__(self):      #__init__是设置一个类中对象的初始属性
        self.cookedString = "生的"
        self.cookedLevel = 0
        self.condiments = []#为了能够存储多个数据,往往在开发中让一个属性是列表

    def __str__(self):       #__str__是设置一个类中使用print(对象）后返回信息
        return "地瓜 状态:%s(%d),添加的作料有:%s"%(self.cookedString, self.cookedLevel, str(self.condiments))

    def cook(self, cooked_time):

        #因为这个方法被调用了多次,为了能够在一次调用这个方法的时候 能够 获取到上一次调用这个方法时的cooked_time
        #所以 需要在此,把cooked_time保存到这个对象的属性中,因为属性不会随着方法的调用而结束(一个方法被调用的时候
        #是可以用局部变量来保存数据的,但是当这个方法定义结束之后这个方法中的所有数据就没有了)
        self.cookedLevel += cooked_time     #__init__的属性可以修改的

        if self.cookedLevel >=0 and self.cookedLevel<3:
            self.cookedString = "生的"
        elif self.cookedLevel >=3 and self.cookedLevel<5:
            self.cookedString = "半生不熟"
        elif self.cookedLevel >=5 and self.cookedLevel<8:
            self.cookedString = "熟了"
        elif self.cookedLevel>8:
            self.cookedString = "烤糊了"

    def addCondiments(self, item):       
        #因为item这个变量指向了一个 作料,所以 接下来需要将item放到append里面
        self.condiments.append(item)


#创建了一个地瓜对象
di_gua = SweetPotato()
print(di_gua)

#开始烤地瓜
di_gua.cook(1)
print(di_gua)
di_gua.cook(1)
print(di_gua)
di_gua.addCondiments("大蒜")
di_gua.cook(1)
print(di_gua)
di_gua.cook(1)
di_gua.addCondiments("番茄酱")
print(di_gua)
di_gua.cook(1)
print(di_gua)
di_gua.cook(1)
di_gua.addCondiments("孜然")
print(di_gua)
di_gua.cook(1)
print(di_gua)
di_gua.addCondiments("芥末")
di_gua.cook(1)
print(di_gua)
di_gua.cook(1)
print(di_gua)
di_gua.cook(1)
print(di_gua)
di_gua.cook(1)
print(di_gua)


#实现得出的结果
jony@jony:~$ python3 class2.py 
地瓜 状态:生的(0),添加的作料有:[]
地瓜 状态:生的(1),添加的作料有:[]
地瓜 状态:生的(2),添加的作料有:[]
地瓜 状态:半生不熟(3),添加的作料有:['大蒜']
地瓜 状态:半生不熟(4),添加的作料有:['大蒜', '番茄酱']
地瓜 状态:熟了(5),添加的作料有:['大蒜', '番茄酱']
地瓜 状态:熟了(6),添加的作料有:['大蒜', '番茄酱', '孜然']
地瓜 状态:熟了(7),添加的作料有:['大蒜', '番茄酱', '孜然']
地瓜 状态:熟了(8),添加的作料有:['大蒜', '番茄酱', '孜然', '芥末']
地瓜 状态:烤糊了(9),添加的作料有:['大蒜', '番茄酱', '孜然', '芥末']
地瓜 状态:烤糊了(10),添加的作料有:['大蒜', '番茄酱', '孜然', '芥末']
地瓜 状态:烤糊了(11),添加的作料有:['大蒜', '番茄酱', '孜然', '芥末']



#定义一个家，然后把家具放置进去并显示    类的嵌套使用
class Home:
    def __init__(self, new_area, new_info, new_addr):
        self.area = new_area
        self.info = new_info
        self.addr = new_addr
        self.left_area = new_area
        self.contain_items = []

    def __str__(self):
        msg = "房子的总面积是:%d,可用面积是:%d,户型是:%s,地址是:%s"%(self.area, self.left_area, self.info, self.addr)
        msg += " 当前房子里的物品有%s"%(str(self.contain_items))
        return msg

    def add_item(self, item):                     #这里我们的方法中添加一个项目
        #self.left_area -= item.area              #这里我们添加的是一个对象，所以item就是一个对象的引用  这里不建意使用这种方法
        #self.contain_items.append(item.name)

        self.left_area -= item.get_area()         #这里我们使用这种方法，直接把这种变量定义到方法里，方便以后好更改 下面的类中有定义
        self.contain_items.append(item.get_name())

class Bed:
    def __init__(self, new_name, new_area):
        self.name = new_name
        self.area = new_area

    def __str__(self):
        return "%s占用的面积是:%d"%(self.name, self.area)

    def get_area(self):
        return self.area

    def get_name(self):
        return self.name

fangzi = Home(129, "三室一厅", "北京市 朝阳区 长安街 666号")
print(fangzi)


bed1 = Bed("席梦思", 4)
print(bed1)

fangzi.add_item(bed1)
print(fangzi)

bed2 = Bed("三人床",3)
fangzi.add_item(bed2)
print(fangzi)
